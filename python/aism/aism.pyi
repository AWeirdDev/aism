from typing import Any, Dict, Optional

class RustAism:
    def __init__(
        self, *, api_key: Optional[str] = None, debug: bool = False
    ) -> None: ...
    def give(self, data: str) -> "RustInstance": ...

class RustInstance:
    def give(self, data: str) -> "RustInstance": ...
    def instruct(self, instruction: str) -> str: ...
    def translate(self, language: str) -> str: ...
    def is_sensitive(self) -> bool: ...
    def mentioned(self, keyword: str) -> bool: ...
    def matches(self, keyword: str) -> bool: ...
    def fill_dict(self, d: Dict[str, str]) -> Dict[str, Any]: ...
    def summarize(self) -> str: ...
